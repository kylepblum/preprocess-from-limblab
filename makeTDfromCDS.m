%% Make TD
spike_routine = @processCDSspikes;
% cont_routine = @processCDScontinuous; % this can be easily modified to be any continuous signal
% event_routine = @processCDSevents;
cds_routine = @processCDS;

if meta.motionTracked
    cont_signal_names = {...
        'pos',...
        'vel',...
        'acc',...
        'force',...
        'motor_control',...
        'markers',...
        'joint_ang',...
        'joint_vel',...
        'muscle_len',...
        'muscle_vel',...
        'opensim_hand_pos',...
        'opensim_hand_vel',...
        'opensim_hand_acc',...
        'opensim_elbow_pos',...
        'opensim_elbow_vel',...
        'opensim_elbow_acc',...
        };

    cont_signal_labels = {...
        {'x','y'},...
        {'vx','vy'},...
        {'ax','ay'},...
        {'fx','fy','fz','mx','my','mz'},...
        {'MotorControlSho','MotorControlElb'},...
        sort(getMarkerNames()),...
        strcat(getJointNames(),'_ang'),...
        strcat(getJointNames(),'_vel'),...
        strcat(getMuscleNames(),'_len'),...
        strcat(getMuscleNames(),'_muscVel'),...
        strcat({'X','Y','Z'},{'_handPos'}),...
        strcat({'X','Y','Z'},{'_handVel'}),...
        strcat({'X','Y','Z'},{'_handAcc'}),...
        strcat({'X','Y','Z'},{'_elbowPos'}),...
        strcat({'X','Y','Z'},{'_elbowVel'}),...
        strcat({'X','Y','Z'},{'_elbowAcc'}),...
        };
else
    cont_signal_names = {...
        'pos',...
        'vel',...
        'acc',...
        'force',...
        'motor_control',...
        };

    cont_signal_labels = {...
        {'x','y'},...
        {'vx','vy'},...
        {'ax','ay'},...
        {'fx','fy','fz','mx','my','mz'},...
        {'MotorControlSho','MotorControlElb'},...
        };
end

if meta.EMGrecorded
    emg_signal_names = getEMGNames();
else
    emg_signal_names = {};
end

switch(meta.task)
    case 'COactpas'
        event_names = {...
            'startTime',...
            'endTime',...
            'tgtOnTime',...
            'goCueTime',...
            'bumpTime',...
            };
    case 'TRT'
        event_names = {...
            'startTime',...
            'endTime',...
            'goCueTime',...
            'bumpTime',...
            'targetStartTime',...
            'ctHoldTime',...
            'otHoldTime',...
            };
    otherwise
        error('not implemented yet')
end

% parameters...
params.bin_size = 0.001;

%% load it in
td_cell = cell(1,length(meta.taskAlias));
for fileIdx = 1:length(meta.taskAlias)
    cds_filename = fullfile(meta.cdslibrary,sprintf('%s_%s_CDS_%s.mat',meta.monkey,meta.date,meta.taskAlias{fileIdx}));
    signal_info = { ...
        initSignalStruct( ...
            'filename',cds_filename, ...
            'routine',spike_routine, ...
            'params',struct(), ... % can pass arbitrary parameters. Shouldn't need much with CDS
            'name','S1', ... % it gets stored under this name... in case of spikes, this gives S1_spikes
            'type','spikes', ... % which type... see documentation of initSignalStruct
            'label',''), ... % label can be indices or strings
        initSignalStruct( ... % continuous data
            'filename',cds_filename, ...
            'routine',cds_routine, ...
            'params',struct(), ...
            'name',[...
                cont_signal_names,...
                emg_signal_names,...
                event_names,...
                ], ... % stored in this name, matched to the labels below which correspond to the output of the processing routine
            'type',[...
                repmat({'generic'},1,length(cont_signal_names)),...
                repmat({'emg'},1,length(emg_signal_names)),...
                repmat({'event'},1,length(event_names)),...
                ],...
            'label',[...
                cont_signal_labels,...
                strcat('EMG_',emg_signal_names),...
                event_names,...
                ], ... % can also pass [1 2],[3 4] etc if you know the arrangment of the signals in the data struct
            'operation',[]), ...
        };
    td_cell{fileIdx} = convertDataToTD(signal_info,params);
    % add trial meta information separately
    td_cell{fileIdx}.trialID = cds_cell{fileIdx}.trials.number';
    td_cell{fileIdx}.result = cds_cell{fileIdx}.trials.result';
    
    if meta.motionTracked
        % add label names
        td_cell{fileIdx}.marker_names = sort(getMarkerNames());
        td_cell{fileIdx}.joint_names = getJointNames();
        td_cell{fileIdx}.muscle_names = getMuscleNames();
    end
    td_cell{fileIdx}.motorcontrol_names = {'MotorControlSho','MotorControlElb'};
    
    % add meta fields
    switch meta.task
        case 'COactpas'
            td_cell{fileIdx}.ctrHold = cds_cell{1}.trials.ctrHold';
            td_cell{fileIdx}.targetDir = cds_cell{1}.trials.tgtDir';
            td_cell{fileIdx}.ctrHoldBump = cds_cell{1}.trials.ctrHoldBump';
            td_cell{fileIdx}.bumpDir = cds_cell{1}.trials.bumpDir';
        case 'TRT'
            td_cell{fileIdx}.ctrHoldBump = cds_cell{1}.trials.spaceNum';
            td_cell{fileIdx}.bumpDir = cds_cell{1}.trials.bumpDir';
        otherwise
            error('not implemented yet')
    end
    
    % make it pretty
    td_cell{fileIdx} = reorderTDfields(td_cell{fileIdx});
end

switch(meta.task)
    case 'COactpas'
        trial_data = td_cell{1};
        td_taskname = 'COactpas';
        
    case 'OOR'
        trial_data = td_cell{1};
%         params.array_alias = {'LeftS1Area2','S1'};
%         % params.exclude_units = [255];
%         params.event_list = {'tgtDir','target_direction';'forceDir','force_direction';'startTargHold','startTargHoldTime';'endTargHoldTime','endTargHoldTime'};
%         params.trial_results = {'R','A','F','I'};
%         td_meta = struct('task','OOR');
%         params.meta = td_meta;
%         
%         trial_data = parseFileByTrial(cds_cell{1},params);

    case 'CObumpcurl'
%         params.array_alias = {'LeftS1Area2','S1'};
%         params.event_list = {'ctrHoldBump';'bumpTime';'bumpDir';'ctrHold'};
%         td_meta = struct('task',meta.task,'epoch','BL');
%         params.trial_results = {'R','A','F','I'};
%         params.meta = td_meta;
%         trial_data_BL = parseFileByTrial(cds_cell{1},params);
%         params.meta.epoch = 'AD';
%         trial_data_AD = parseFileByTrial(cds_cell{2},params);
%         params.meta.epoch = 'WO';
%         trial_data_WO = parseFileByTrial(cds_cell{3},params);
%         
%         trial_data = cat(2,trial_data_BL,trial_data_AD,trial_data_WO);
%         td_taskname = 'CObumpcurl';

    case 'TRT'
        trial_data = td_cell{1};
        td_taskname = 'TRT';
        
    case 'RW'
        if any(contains(meta.taskAlias,'DL'))
%             fprintf('Interpreting as RWTW task')
%             params.array_alias = {'LeftS1Area2','S1';'RightCuneate','CN'};
%             params.trial_results = {'R','A','F','I'};
%             td_meta = struct('task',meta.task,'spaceNum',2);
%             params.meta = td_meta;
%             trial_data_DL = parseFileByTrial(cds_cell{contains(meta.taskAlias,'DL')},params);
%             td_meta = struct('task',meta.task,'spaceNum',1);
%             params.meta = td_meta;
%             trial_data_PM = parseFileByTrial(cds_cell{contains(meta.taskAlias,'PM')},params);
%             trial_data = [trial_data_PM trial_data_DL];
%             % match up with TRT
%             for trial = 1:length(trial_data)
%                 trial_data(trial).idx_targetStartTime = trial_data(trial).idx_startTime;
%             end
%             trial_data = reorderTDfields(trial_data);
            td_taskname = 'RWTW';
        else
            trial_data = td_cell{1};
            fprintf('Interpreting as regular random walk')
%             params.array_alias = {'LeftS1Area2','S1'};
%             params.trial_results = {'R','A','F','I'};
%             params.include_ts = true;
%             td_meta = struct('task','RW');
%             params.meta = td_meta;
%             trial_data = parseFileByTrial(cds_cell{1},params);
%             % match up with TRT
%             for trial = 1:length(trial_data)
%                 trial_data(trial).idx_targetStartTime = trial_data(trial).idx_goCueTime(1);
%             end
%             trial_data = reorderTDfields(trial_data);
            td_taskname = 'RW';
        end
        
    otherwise
        error('Unrecognized task')
        
end

%% Save TD
save(fullfile(meta.tdlibrary,[meta.monkey '_' meta.date '_' td_taskname '_TD.mat']),'trial_data','-v7.3')