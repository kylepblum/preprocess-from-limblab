%%
cds_filename = fullfile(meta.workingfolder,'CDS',sprintf('%s_%s_CDS_%s.mat',meta.monkey,meta.date,meta.taskAlias{1}));
spike_routine = @processCDSspikes;
cont_routine = @processCDScontinuous; % this can be easily modified to be any continuous signal
event_routine = @processCDSevents;
%   some clever labeling

signal_info = { ...
    initSignalStruct( ... % neural data
    'filename',cds_filename, ...
    'routine',spike_routine, ...
    'params',struct(), ... % can pass arbitrary parameters. Shouldn't need much with CDS
    'name','S1', ... % it gets stored under this name... in case of spikes, this gives M1_spikes
    'type','spikes', ... % which type... see documentation of initSignalStruct
    'label',''), ... % label can be indices or strings
    initSignalStruct( ... % continuous data
    'filename',cds_filename, ...
    'routine',cont_routine, ...
    'params',struct('signal_names',{{'kin','force','motorcontrol'}}), ...
    'name',{'pos','vel','acc','force','motor_control'}, ... % stored in this name, matched to the labels below which correspond to the output of the processing routine
    'label',{{'x','y'},{'vx','vy'},{'ax','ay'},{'fx','fy','fz','mx','my','mz'},{'MotorControlSho','MotorControlElb'}}, ... % can also pass [1 2],[3 4] etc if you know the arrangment of the signals in the data struct
    'operation',[]), ...
    initSignalStruct( ... % event data
    'filename',cds_filename, ...
    'routine',event_routine, ...
    'params',struct('event_names',{{'startTime','endTime','tgtOnTime','goCueTime','bumpTime'}}), ...
    'name',{'startTime','endTime','tgtOnTime','goCueTime','bumpTime'}, ...
    'type','event', ...
    'label',{'startTime','endTime','tgtOnTime','goCueTime','bumpTime'}), ...
    };

[trial_data,td_params,error_flag] = convertDataToTD(signal_info);

% add meta information to trial_data


%%
out = processCDScontinuous(cds_filename,struct('signal_names',{{'kin','force','motorcontrol'}}));

%%
td_s = splitTD(trial_data,struct('split_idx_name','idx_startTime','linked_fields',{{'idx_tgtOnTime','idx_goCueTime','idx_endTime','idx_bumpTime'}}));
